# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.6)
{
  description = "Nome: my Nix home";

  inputs = {
    determinate = {
      url = "https://flakehub.com/f/DeterminateSystems/determinate/3";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-homebrew = {
      url = "github:zhaofengli/nix-homebrew";
    };
    home-manager = {
      url = "https://flakehub.com/f/nix-community/home-manager/0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-darwin = {
      url = "https://flakehub.com/f/nix-darwin/nix-darwin/0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0";
  };

  outputs =
    { self, ... }@inputs:
    let
      supportedSystems = [ "aarch64-darwin" ];
      forEachSupportedSystem =
        f:
        inputs.nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import inputs.nixpkgs {
              inherit system;
              overlays = [ self.overlays.default ];
            };
            inherit system;
          }
        );

      stateVersion = "25.05";
      system = "aarch64-darwin";
      username = "luuk";
    in
    {
      devShells = forEachSupportedSystem (
        {
          pkgs,
          system,
        }:
        {
          default = pkgs.mkShellNoCC {
            name = "nome";
            packages =
              (with pkgs; [
                reload
              ]);
          };
        }
      );

      overlays.default = final: prev: {
        inherit (prev.stdenv.hostPlatform) system;

        reload =
          let
            darwin-rebuild = inputs.nixpkgs.lib.getExe inputs.nix-darwin.packages.${system}.darwin-rebuild;
            zsh = inputs.nixpkgs.lib.getExe final.zsh;
            zshrc = "${final.lib.homeDirectory}/.zshrc";
          in
          final.writeShellApplication {
            name = "reload";
            runtimeInputs = with final; [
              darwin-rebuild
              zsh
            ];
            text = ''
              if [[ -f "/etc/nix/nix.custom.conf" ]]; then
                echo "> Making backup of custom Nix config"
                sudo cp /etc/nix/nix.custom.conf /etc/nix/nix.custom.conf.before-nix-darwin
              fi

              if [[ -f "/etc/nix/flake-registry.json" ]]; then
                echo "> Making backup of custom Nix flake registry"
                sudo cp /etc/nix/flake-registry.json /etc/nix/flake-registry.json.before-nix-darwin
              fi

              echo "> Running darwin-rebuild switch..."
              sudo darwin-rebuild switch --flake .
              echo "> darwin-rebuild switch was successful âœ…"
              echo "> Refreshing zshrc..."
              zsh -c "source ${zshrc}"
              echo "> zshrc was refreshed successfully âœ…"
              echo "> macOS config was successfully applied ðŸš€"
            '';
          };


        # Constant values to pass around
        constants = { inherit username system; };

        # Extra lib functions
        lib = prev.lib // {
          homeDirectory = if prev.stdenv.isDarwin then "/Users/${username}" else "/home/${username}";
        };
      };

      darwinConfigurations.corellia = inputs.nix-darwin.lib.darwinSystem {
        inherit system;
        modules = [
          self.darwinModules.base
          inputs.determinate.darwinModules.default
          inputs.home-manager.darwinModules.home-manager
          inputs.nix-homebrew.darwinModules.nix-homebrew
          self.darwinModules.homebrew
          self.darwinModules.home-manager
        ];
      };

      darwinModules = {
        base =
          { pkgs, ... }:
          import ./nix-darwin/base {
            inherit pkgs;
            overlays = [
              self.overlays.default
            ];
          };

        homebrew = { pkgs, ... }: import ./homebrew { inherit pkgs; };
        home-manager = { pkgs, ... }: import ./home-manager { inherit pkgs stateVersion username; };
      };

      templates = import ./templates;
    };
}
